Ref: https://www.inf.ethz.ch/personal/wirth/FPGA-relatedWork/RISC-Arch.pdf
And: https://github.com/pdewacht/oberon-risc-emu/blob/master/src/risc.c

0 a b 0 0 0 0 c 	MOV R.a, R.c		R.a <- R.c 			; Move register
2 a b 0 0 0 0 c		MOV R.a, H		R.a <- H			; Move helper register
3 a b 0 0 0 0 c		MOV R.a, [N,Z C,V]	R.a <- flags			; Move flags
4 a b 0 i i i i		MOV R.a, #i		R.a <- i			; Move immediate
6 a b 0 i i i i         MOVH R.a, #i		R-a <- 0xffff0000 | i		; Move immediate to high half

0 a b 1 0 0 0 c		LSL R.a, R.b, R.c	R.a <- R.b << R.c		; Logical shift left
4 a b 1 i i i i		LSL R.a, R.b, #i	R.a <- R.b << i			; Logical shift left immediate

0 a b 2 0 0 0 c		ASR R.a, R.b, R.c	R.a <- R.b >> R.c | R.b[31|	; Arithmetic shift right
4 a b 2 0 0 0 c		ASR R.a, R.b, #i	R.a <- R.b >> i | R.b[31|	; Arithmetic shift right immediate

0 a b 3 0 0 0 c		ROR R.a, R.b, R.c	R.a <- R.b ror R.c		; Rotate right
4 a b 3 0 0 0 c		ROR R.a, R.b, #i	R.a <- R.b ror i		; Rotate rith immediate

0 a b 4 0 0 0 c		AND R.a, R.b, R.c	R.a <- R.b & R.c		; DDRotate right
4 a b 4 0 0 0 c		AND R.a, R.b, #i	R.a <- R.b & i			; Rotate rith immediate



